Description: Send the correct location URI to the Glance v2 API
 When uploading a volume to an image, send the new-style
 cinder://<store-id>/<volume-id> URL to the Glance API if
 image_service:store_id is present in the volume type extra specs.
 .
 Closes-Bug: #1978020
 Discussed with: Rajat Dhasmana <rajatdhasmana@gmail.com>
 Change-Id: I815706f691a7d1e5a0c54eb15222417008ef1f34
Origin: https://review.opendev.org/c/openstack/cinder/+/845178
Forwarded: yes
Author: Peter Penchev <openstack-dev@storpool.com>
Last-Update: 2022-06-09

--- a/cinder/tests/unit/volume/test_image.py
+++ b/cinder/tests/unit/volume/test_image.py
@@ -344,7 +344,7 @@
     def test_copy_volume_to_image_with_image_volume(self):
         image = self._test_copy_volume_to_image_with_image_volume()
         self.assertTrue(image['locations'][0]['url'].startswith('cinder://'))
-        image_volume_id = image['locations'][0]['url'][9:]
+        image_volume_id = image['locations'][0]['url'].split('/')[-1]
         # The image volume does NOT include the snapshot_id, and include the
         # source_volid which is the uploaded-volume id.
         vol_ref = db.volume_get(self.context, image_volume_id)
--- a/cinder/tests/unit/volume/test_volume_manager.py
+++ b/cinder/tests/unit/volume/test_volume_manager.py
@@ -287,3 +287,140 @@
         manager._parse_connection_options(ctxt, vol, conn_info)
         self.assertIn('cacheable', conn_info['data'])
         self.assertIs(conn_info['data']['cacheable'], False)
+
+    @mock.patch('cinder.message.api.API.create')
+    @mock.patch('cinder.volume.volume_utils.require_driver_initialized')
+    @mock.patch('cinder.volume.manager.VolumeManager._clone_image_volume')
+    @mock.patch('cinder.db.volume_metadata_update')
+    def test_clone_image_no_volume(self,
+                                   fake_update,
+                                   fake_clone,
+                                   fake_msg_create,
+                                   fake_init):
+        """Make sure nothing happens if no volume was created."""
+        manager = vol_manager.VolumeManager()
+
+        ctx = mock.MagicMock(spec=[])
+        volume = mock.MagicMock(spec=[])
+        image_service = mock.MagicMock(spec=[])
+
+        fake_clone.return_value = None
+
+        image_meta = {'disk_format': 'raw', 'container_format': 'ova'}
+        manager._clone_image_volume_and_add_location(ctx, volume,
+                                                     image_service, image_meta)
+        fake_clone.assert_not_called()
+        fake_update.assert_not_called()
+
+        image_meta = {'disk_format': 'qcow2', 'container_format': 'bare'}
+        manager._clone_image_volume_and_add_location(ctx, volume,
+                                                     image_service, image_meta)
+        fake_clone.assert_not_called()
+        fake_update.assert_not_called()
+
+        image_meta = {'disk_format': 'raw', 'container_format': 'bare'}
+        manager._clone_image_volume_and_add_location(ctx, volume,
+                                                     image_service, image_meta)
+        fake_clone.assert_called_once_with(ctx, volume, image_meta)
+        fake_update.assert_not_called()
+
+    @mock.patch('cinder.message.api.API.create')
+    @mock.patch('cinder.volume.volume_utils.require_driver_initialized')
+    @mock.patch('cinder.volume.manager.VolumeManager._clone_image_volume')
+    @mock.patch('cinder.db.volume_metadata_update')
+    def test_clone_image_no_store_id(self,
+                                     fake_update,
+                                     fake_clone,
+                                     fake_msg_create,
+                                     fake_init):
+        """Send a cinder://<volume-id> URL if no store ID in extra specs."""
+        manager = vol_manager.VolumeManager()
+
+        project_id = '37'
+        ctx = mock.MagicMock(spec=['project_id'])
+        ctx.project_id = project_id
+
+        volume = mock.MagicMock(spec=['volume_type'])
+        volume.volume_type.extra_specs = {'backend': 'unknown'}
+
+        image_volume_id = '42'
+        image_volume = mock.MagicMock(spec=['id'])
+        image_volume.id = image_volume_id
+        url = 'cinder://%(vol)s' % {'vol': image_volume_id}
+
+        image_service = mock.MagicMock(spec=['add_location'])
+        image_meta_id = '616'
+        image_meta = {
+            'id': image_meta_id,
+            'disk_format': 'raw',
+            'container_format': 'bare',
+        }
+        image_volume_meta = {
+            'image_owner': project_id,
+            'glance_image_id': image_meta_id,
+        }
+
+        fake_clone.return_value = image_volume
+
+        manager._clone_image_volume_and_add_location(ctx, volume,
+                                                     image_service, image_meta)
+        fake_clone.assert_called_once_with(ctx, volume, image_meta)
+        fake_update.assert_called_with(ctx, image_volume_id,
+                                       image_volume_meta, False)
+        image_service.add_location.assert_called_once_with(ctx, image_meta_id,
+                                                           url, {})
+
+    @mock.patch('cinder.message.api.API.create')
+    @mock.patch('cinder.volume.volume_utils.require_driver_initialized')
+    @mock.patch('cinder.volume.manager.VolumeManager._clone_image_volume')
+    @mock.patch('cinder.db.volume_metadata_update')
+    def test_clone_image_with_store_id(self,
+                                       fake_update,
+                                       fake_clone,
+                                       fake_msg_create,
+                                       fake_init):
+        """Send a cinder://<store-id>/<volume-id> URL."""
+        manager = vol_manager.VolumeManager()
+
+        project_id = '37'
+        ctx = mock.MagicMock(spec=['project_id'])
+        ctx.project_id = project_id
+
+        store_id = 'muninn'
+        volume = mock.MagicMock(spec=['volume_type'])
+        volume.volume_type.extra_specs = {
+            'backend': 'unknown',
+            'image_service:store_id': store_id,
+        }
+
+        image_volume_id = '42'
+        image_volume = mock.MagicMock(spec=['id'])
+        image_volume.id = image_volume_id
+        url = 'cinder://%(store)s/%(vol)s' % {
+            'store': store_id,
+            'vol': image_volume_id,
+        }
+
+        image_service = mock.MagicMock(spec=['add_location'])
+        image_meta_id = '616'
+        image_meta = {
+            'id': image_meta_id,
+            'disk_format': 'raw',
+            'container_format': 'bare',
+        }
+        image_volume_meta = {
+            'image_owner': project_id,
+            'glance_image_id': image_meta_id,
+        }
+
+        fake_clone.return_value = image_volume
+
+        manager._clone_image_volume_and_add_location(ctx, volume,
+                                                     image_service, image_meta)
+        fake_clone.assert_called_once_with(ctx, volume, image_meta)
+        fake_update.assert_called_with(ctx, image_volume_id,
+                                       image_volume_meta, False)
+        image_service.add_location.assert_called_once_with(ctx,
+                                                           image_meta_id,
+                                                           url,
+                                                           {'store': store_id})
--- a/cinder/volume/manager.py
+++ b/cinder/volume/manager.py
@@ -1680,7 +1680,6 @@
                                        image_volume_meta,
                                        False)
 
-        uri = 'cinder://%s' % image_volume.id
         image_registered = None
 
         # retrieve store information from extra-specs
@@ -1689,6 +1688,9 @@
 
         if store_id:
             location_metadata['store'] = store_id
+            uri = 'cinder://%s/%s' % (store_id, image_volume.id)
+        else:
+            uri = 'cinder://%s' % image_volume.id
 
         try:
             image_registered = image_service.add_location(
